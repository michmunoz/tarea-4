"0","rownames(friends)<- friends[,1]
View(friends)
friends<-friends[,-1]
friends<-as.matrix(friends)
diag(friends) <-0
diag
"
"1","function (x = 1, nrow, ncol, names = TRUE) 
"
"1","{
"
"1","    if (is.matrix(x)) {
"
"1","        if (nargs() > 1L && (nargs() > 2L || any(names(match.call()) %in% 
"
"1","            c(""nrow"", ""ncol"")))) 
"
"1","            stop(""'nrow' or 'ncol' cannot be specified when 'x' is a matrix"")
"
"1","        if ((m <- min(dim(x))) == 0L) 
"
"1","            return(vector(typeof(x), 0L))
"
"1","        y <- x[1 + 0L:(m - 1L) * (dim(x)[1L] + 1)]
"
"1","        if (names) {
"
"1","            nms <- dimnames(x)
"
"1","            if (is.list(nms) && !any(vapply(nms, is.null, NA)) && 
"
"1","                identical((nm <- nms[[1L]][seq_len(m)]), nms[[2L]][seq_len(m)])) 
"
"1","                names(y) <- nm
"
"1","        }
"
"1","        return(y)
"
"1","    }
"
"1","    if (is.array(x) && length(dim(x)) != 1L) 
"
"1","        stop(""'x' is an array, but not one-dimensional."")
"
"1","    if (missing(x)) 
"
"1","        n <- nrow
"
"1","    else if (length(x) == 1L && nargs() == 1L) {
"
"1","        n <- as.integer(x)
"
"1","        x <- 1
"
"1","    }
"
"1","    else n <- length(x)
"
"1","    if (!missing(nrow)) 
"
"1","        n <- nrow
"
"1","    if (missing(ncol)) 
"
"1","        ncol <- n
"
"1","    .Internal(diag(x, n, ncol))
"
"1","}
"
"1","<bytecode: 0x000002ce99d66aa0>
"
"1","<environment: namespace:base>
"
"0","redf<-graph_from_adjacency_matrix(friends)"
"0","plot(redf, vertex.size=15,vertex.size=5,"
"0","     edge.arrow.size=0.25,layout=layout_nicely,vertex.size.label=0.25)"
